const { cmd } = require('../command');
const config = require('../config');

const antiCallEnabled = new Set();

cmd({
    pattern: "anticall",
    alias: ["nocal", "blockcall"],
    react: "üìµ",
    desc: "*A·¥Ñ·¥õ…™·¥†·¥á/·¥Ö·¥áÃÅs·¥Ä·¥Ñ·¥õ…™·¥†·¥á  ü'·¥Ä…¥·¥õ…™-·¥Ä·¥ò·¥ò·¥á üs ·¥ò·¥è·¥ú Ä ·¥ò Ä·¥è·¥õ·¥á…¢·¥á Ä  ü·¥á  ô·¥è·¥õ*",
    category: "security",
    use: "*.anticall on/off/status",
    filename: __filename
},
async (conn, mek, m, { reply, args, isOwner }) => {
    try {
        if (!isOwner) return reply("‚ùå Seul le propri√©taire peut g√©rer l‚Äôanticall.");

        const mode = args[0]?.toLowerCase();
        const botNumber = conn.user.id;

        switch (mode) {
            case "on":
                antiCallEnabled.add(botNumber);
                reply("üìµ *Anticall activ√©.* Les appels entrants seront automatiquement bloqu√©s.");
                break;

            case "off":
                antiCallEnabled.delete(botNumber);
                reply("‚úÖ *Anticall d√©sactiv√©.* Le bot acceptera √† nouveau les appels.");
                break;

            case "status":
                reply(`üìä *Statut Anticall :* ${antiCallEnabled.has(botNumber) ? "‚úÖ Activ√©" : "‚ùå D√©sactiv√©"}`);
                break;

            default:
                reply("‚ùì Utilisation : *.anticall on/off/status*");
        }
    } catch (e) {
        console.error(e);
        reply("‚ùé Erreur : " + e.message);
    }
});

module.exports = {
    antiCallEnabled,

    // Middleware √† appeler sur l'√©v√©nement de type call
    async handleCall(conn, callUpdate) {
        try {
            const botId = conn.user.id;
            if (!antiCallEnabled.has(botId)) return;

            for (const call of callUpdate) {
                if (call.isGroup === false && call.status === "offer") {
                    const callerId = call.from;
                    await conn.rejectCall(call.id, call.from);
                    await conn.sendMessage(callerId, {
                        text: `üö´ *Appels interdits !*\nVous avez √©t√© automatiquement bloqu√© pour avoir essay√© d'appeler le bot.`,
                    });

                    // Optionnel : bloquer l'utilisateur
                    await conn.updateBlockStatus(callerId, "block");
                }
            }
        } catch (e) {
            console.error("‚ùå Erreur anticall :", e.message);
        }
    }
};
